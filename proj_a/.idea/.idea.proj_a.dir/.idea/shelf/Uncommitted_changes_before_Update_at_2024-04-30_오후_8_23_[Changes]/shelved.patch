Index: Source/proj_a/DPGameModeBase.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/proj_a/DPGameModeBase.h b/Source/proj_a/DPGameModeBase.h
deleted file mode 100644
--- a/Source/proj_a/DPGameModeBase.h	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
+++ /dev/null	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
@@ -1,19 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-#pragma once
-
-#include "CoreMinimal.h"
-#include "GameFramework/GameModeBase.h"
-#include "DPGameModeBase.generated.h"
-
-/**
- * 
- */
-UCLASS()
-class PROJ_A_API ADPGameModeBase : public AGameModeBase
-{
-	GENERATED_BODY()
-	
-public:
-	ADPGameModeBase();
-};
Index: Source/proj_a/DPPlayerController.cpp
===================================================================
diff --git a/Source/proj_a/DPPlayerController.cpp b/Source/proj_a/DPPlayerController.cpp
deleted file mode 100644
--- a/Source/proj_a/DPPlayerController.cpp	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
+++ /dev/null	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
@@ -1,116 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-#include "DPCharacter.h"
-#include "DPPlayerController.h"
-#include "EnhancedInputComponent.h"
-#include "EnhancedInputSubsystems.h"
-#include "InputMappingContext.h"
-
-ADPPlayerController::ADPPlayerController()
-{
-	static ConstructorHelpers::FObjectFinder<UInputMappingContext>DEFAULT_CONTEXT
-	(TEXT("/Game/input/imc_character.imc_character"));
-	if (DEFAULT_CONTEXT.Succeeded())
-		defaultContext = DEFAULT_CONTEXT.Object;
-
-	static ConstructorHelpers::FObjectFinder<UInputAction>IA_MOVE
-	(TEXT("/Game/input/ia_move.ia_move"));
-	if (IA_MOVE.Succeeded())
-		moveAction = IA_MOVE.Object;
-
-	static ConstructorHelpers::FObjectFinder<UInputAction>IA_JUMP
-	(TEXT("/Game/input/ia_jump.ia_jump"));
-	if (IA_JUMP.Succeeded())
-		jumpAction = IA_JUMP.Object;
-
-	static ConstructorHelpers::FObjectFinder<UInputAction>IA_ROTATE
-	(TEXT("/Game/input/ia_rotate.ia_rotate"));
-	if (IA_ROTATE.Succeeded())
-		rotateAction = IA_ROTATE.Object;
-}
-
-void ADPPlayerController::BeginPlay()
-{
-	Super::BeginPlay();
-
-	// ADPCharacter�� ĳ����, ���� Pawn�� character ������ �Ҵ�
-	character = Cast<ADPCharacter>(GetPawn());
-
-	// character�� ��ȿ���� Ȯ��
-	if (!character) {
-		UE_LOG(LogTemp, Warning, TEXT("character null"));
-		return;
-	}
-
-	// subsystem, IMC ����
-	if (UEnhancedInputLocalPlayerSubsystem* SubSystem = ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(GetLocalPlayer()))
-		SubSystem->AddMappingContext(defaultContext, 0);
-}
-
-void ADPPlayerController::SetupInputComponent()
-{
-	Super::SetupInputComponent();
-
-	// enhanced input component ĳ�����ϰ� ���ε�
-	if (UEnhancedInputComponent* EnhancedInputComponent = Cast<UEnhancedInputComponent>(InputComponent)) {
-		// �÷��̾� �̵� ( w, a, d, s )
-		EnhancedInputComponent->BindAction(moveAction, ETriggerEvent::Triggered, this, &ADPPlayerController::Move);
-		// �÷��̾� ���� ( space )
-		EnhancedInputComponent->BindAction(jumpAction, ETriggerEvent::Triggered, this, &ADPPlayerController::Jump);
-		// ���� ��ȯ ( ���콺 ȸ�� )
-		EnhancedInputComponent->BindAction(rotateAction, ETriggerEvent::Triggered, this, &ADPPlayerController::Rotate);
-	}
-}
-
-void ADPPlayerController::Move(const FInputActionValue& value)
-{
-	// UE_LOG(LogTemp, Warning, TEXT("ia_move_x : %f"), value.Get<FVector2D>().X);
-	// UE_LOG(LogTemp, Warning, TEXT("ia_move_y : %f"), value.Get<FVector2D>().Y);
-
-	const FVector2D actionValue = value.Get<FVector2D>();
-	const FRotator controlRotation = GetControlRotation();
-	const FRotator yaw(0.f, controlRotation.Yaw, 0.f);
-
-	const FVector forwardVector = FRotationMatrix(controlRotation).GetUnitAxis(EAxis::X);
-	const FVector rightVector = FRotationMatrix(controlRotation).GetUnitAxis(EAxis::Y);
-	
-	// send move command ( id, actionValue ) ( x = 1 forward, x = -1 backward, y = 1 right, y = -1 left )
-	character->AddMovementInput(forwardVector, actionValue.X);
-	character->AddMovementInput(rightVector, actionValue.Y);
-}
-
-void ADPPlayerController::Jump(const FInputActionValue& value)
-{
-	//UE_LOG(LogTemp, Warning, TEXT("ia_jump : %d"), value.Get<bool>());
-	
-	bool actionValue = value.Get<bool>();
-	if (actionValue)
-		// send jump command ( id, actionValue ) ( true = jump )
-		character->Jump();
-}
-
-void ADPPlayerController::Rotate(const FInputActionValue& value)
-{
-	// UE_LOG(LogTemp, Warning, TEXT("ia_rotate_x : %f"), value.Get<FVector2D>().X);
-	// UE_LOG(LogTemp, Warning, TEXT("ia_rotate_y : %f"), value.Get<FVector2D>().Y);
-	
-	FVector2D actionValue = value.Get<FVector2D>();
-
-	// send rotate command ( id, actionValue )	// �ü��� �Ⱥ����� ��������� ?
-	character->AddControllerYawInput(actionValue.X);
-	character->AddControllerPitchInput(actionValue.Y);
-}
-
-void ADPPlayerController::UpdatePlayer(/*DataHub result*/)	// �ѹ��� �ޱ� ?
-{
-	/*
-	if (result.moveResult)
-		character->SetActorLocation(moveResult.x, moveResult.y, moveResult.z);
-	if (result.jumpResult)
-		character->Jump();
-	if (result.rotateResult)
-		character->
-	character->SetActorRotation();
-	character->SetActorLocationAndRotation();
-	*/
-}
Index: Source/proj_a/proj_a.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/proj_a/proj_a.cpp b/Source/proj_a/proj_a.cpp
deleted file mode 100644
--- a/Source/proj_a/proj_a.cpp	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
+++ /dev/null	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
@@ -1,6 +0,0 @@
-// Copyright Epic Games, Inc. All Rights Reserved.
-
-#include "proj_a.h"
-#include "Modules/ModuleManager.h"
-
-IMPLEMENT_PRIMARY_GAME_MODULE( FDefaultGameModuleImpl, proj_a, "proj_a" );
Index: Source/proj_a/DPGameModeBase.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/proj_a/DPGameModeBase.cpp b/Source/proj_a/DPGameModeBase.cpp
deleted file mode 100644
--- a/Source/proj_a/DPGameModeBase.cpp	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
+++ /dev/null	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
@@ -1,12 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-
-#include "DPGameModeBase.h"
-#include "DPCharacter.h"
-#include "DPPlayerController.h"
-
-ADPGameModeBase::ADPGameModeBase()
-{
-	DefaultPawnClass = ADPCharacter::StaticClass();
-	PlayerControllerClass = ADPPlayerController::StaticClass();
-}
Index: Source/proj_a/DPCharacter.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/proj_a/DPCharacter.h b/Source/proj_a/DPCharacter.h
deleted file mode 100644
--- a/Source/proj_a/DPCharacter.h	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
+++ /dev/null	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
@@ -1,44 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-#pragma once
-
-#include "CoreMinimal.h"
-#include "GameFramework/Character.h"
-#include "DPCharacter.generated.h"
-
-UCLASS()
-class PROJ_A_API ADPCharacter : public ACharacter
-{
-	GENERATED_BODY()
-
-public:
-	// Sets default values for this character's properties
-	ADPCharacter();
-
-protected:
-	// Called when the game starts or when spawned
-	virtual void BeginPlay() override;
-
-public:	
-	// Called every frame
-	virtual void Tick(float DeltaTime) override;
-
-	// Called to bind functionality to input
-	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;
-
-	// FString playerID;
-	// FVector3f pos;
-	// FVector3f orientation;
-	// FString state;
-
-	// WeaponCompoment* weaponComponent;
-	// healthCompoment* healthComponent;
-	// StateComponent* stateComponent;
-
-private:
-	UPROPERTY(VisibleAnywhere, Category = Camera)
-	class USpringArmComponent* springArm;
-
-	UPROPERTY(VisibleAnywhere, Category = Camera)
-	class UCameraComponent* camera;
-};
Index: Source/proj_a/proj_a.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/proj_a/proj_a.h b/Source/proj_a/proj_a.h
deleted file mode 100644
--- a/Source/proj_a/proj_a.h	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
+++ /dev/null	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
@@ -1,6 +0,0 @@
-// Copyright Epic Games, Inc. All Rights Reserved.
-
-#pragma once
-
-#include "CoreMinimal.h"
-
Index: Source/proj_a/DPPlayerController.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/proj_a/DPPlayerController.h b/Source/proj_a/DPPlayerController.h
deleted file mode 100644
--- a/Source/proj_a/DPPlayerController.h	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
+++ /dev/null	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
@@ -1,45 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-#pragma once
-
-#include "CoreMinimal.h"
-#include "GameFramework/PlayerController.h"
-#include "InputActionValue.h"
-#include "DPPlayerController.generated.h"
-
-/**
- * 
- */
-UCLASS()
-class PROJ_A_API ADPPlayerController : public APlayerController
-{
-	GENERATED_BODY()
-
-public:
-	ADPPlayerController();
-
-protected:
-	virtual void BeginPlay() override;
-	virtual void SetupInputComponent() override;
-
-private:
-	class ADPCharacter* character;
-
-	UPROPERTY(VisibleAnywhere, Category = Input)
-	class UInputMappingContext* defaultContext;
-
-	UPROPERTY(VisibleAnywhere, Category = Input)
-	class UInputAction* moveAction;
-	
-	UPROPERTY(VisibleAnywhere, Category = Input)
-	class UInputAction* jumpAction;
-
-	UPROPERTY(VisibleAnywhere, Category = Input)
-	class UInputAction* rotateAction;
-
-	void Move(const FInputActionValue& value);
-	void Jump(const FInputActionValue& value);
-	void Rotate(const FInputActionValue& value);
-
-	void UpdatePlayer(/*DataHub result*/);
-};
Index: Source/proj_a/DPCharacter.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Source/proj_a/DPCharacter.cpp b/Source/proj_a/DPCharacter.cpp
deleted file mode 100644
--- a/Source/proj_a/DPCharacter.cpp	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
+++ /dev/null	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
@@ -1,53 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-#include "DPCharacter.h"
-#include "GameFramework/SpringArmComponent.h"
-#include "Camera/CameraComponent.h"
-
-// Sets default values
-ADPCharacter::ADPCharacter()
-{
- 	// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
-	PrimaryActorTick.bCanEverTick = true;
-
-	springArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("SPRINGARM"));
-	camera = CreateDefaultSubobject<UCameraComponent>(TEXT("CAMERA"));
-	
-	springArm->SetupAttachment(RootComponent);
-	camera->SetupAttachment(springArm);
-
-	static ConstructorHelpers::FObjectFinder<USkeletalMesh> SK_CHARACTER
-	(TEXT("/Game/model/player/Swat.Swat"));
-	if (SK_CHARACTER.Succeeded()) {
-		GetMesh()->SetSkeletalMesh(SK_CHARACTER.Object);
-	}
-
-	GetMesh()->SetRelativeLocationAndRotation(FVector(0.f, 0.f, -90.f), FRotator(0.f, 270.f, 0.f));
-
-	springArm->TargetArmLength = 700.0f;
-	//springArm->SetRelativeRotation(FRotator(0.f, 0.f, 0.f));
-	springArm->bUsePawnControlRotation = true;
-}
-
-// Called when the game starts or when spawned
-void ADPCharacter::BeginPlay()
-{
-	Super::BeginPlay();
-	
-}
-
-// Called every frame
-void ADPCharacter::Tick(float DeltaTime)
-{
-	Super::Tick(DeltaTime);
-
-}
-
-// Called to bind functionality to input
-void ADPCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
-{
-	Super::SetupPlayerInputComponent(PlayerInputComponent);
-
-
-}
-
Index: Config/DefaultEditor.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Config/DefaultEditor.ini b/Config/DefaultEditor.ini
--- a/Config/DefaultEditor.ini	(revision dd7f5632ad176dcd5de22e9eee02ffc48edb8cdf)
+++ b/Config/DefaultEditor.ini	(date 1714476179804)
@@ -1,0 +1,2 @@
+[/Script/AdvancedPreviewScene.SharedProfiles]
+
