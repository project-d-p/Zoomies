// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: movement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_movement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_movement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_movement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_movement_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_movement_2eproto;
class Movement;
struct MovementDefaultTypeInternal;
extern MovementDefaultTypeInternal _Movement_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Movement* Arena::CreateMaybeMessage<::Movement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Movement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Movement) */ {
 public:
  inline Movement() : Movement(nullptr) {}
  ~Movement() override;
  explicit PROTOBUF_CONSTEXPR Movement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Movement(const Movement& from);
  Movement(Movement&& from) noexcept
    : Movement() {
    *this = ::std::move(from);
  }

  inline Movement& operator=(const Movement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Movement& operator=(Movement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Movement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Movement* internal_default_instance() {
    return reinterpret_cast<const Movement*>(
               &_Movement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Movement& a, Movement& b) {
    a.Swap(&b);
  }
  inline void Swap(Movement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Movement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Movement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Movement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Movement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Movement& from) {
    Movement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Movement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Movement";
  }
  protected:
  explicit Movement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgessVectorFieldNumber = 1,
    kForwardVectorFieldNumber = 2,
    kRightVectorFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kVelocitySizeFieldNumber = 5,
  };
  // .Vec3 progess_vector = 1;
  bool has_progess_vector() const;
  private:
  bool _internal_has_progess_vector() const;
  public:
  void clear_progess_vector();
  const ::Vec3& progess_vector() const;
  PROTOBUF_NODISCARD ::Vec3* release_progess_vector();
  ::Vec3* mutable_progess_vector();
  void set_allocated_progess_vector(::Vec3* progess_vector);
  private:
  const ::Vec3& _internal_progess_vector() const;
  ::Vec3* _internal_mutable_progess_vector();
  public:
  void unsafe_arena_set_allocated_progess_vector(
      ::Vec3* progess_vector);
  ::Vec3* unsafe_arena_release_progess_vector();

  // .Vec3 forward_vector = 2;
  bool has_forward_vector() const;
  private:
  bool _internal_has_forward_vector() const;
  public:
  void clear_forward_vector();
  const ::Vec3& forward_vector() const;
  PROTOBUF_NODISCARD ::Vec3* release_forward_vector();
  ::Vec3* mutable_forward_vector();
  void set_allocated_forward_vector(::Vec3* forward_vector);
  private:
  const ::Vec3& _internal_forward_vector() const;
  ::Vec3* _internal_mutable_forward_vector();
  public:
  void unsafe_arena_set_allocated_forward_vector(
      ::Vec3* forward_vector);
  ::Vec3* unsafe_arena_release_forward_vector();

  // .Vec3 right_vector = 3;
  bool has_right_vector() const;
  private:
  bool _internal_has_right_vector() const;
  public:
  void clear_right_vector();
  const ::Vec3& right_vector() const;
  PROTOBUF_NODISCARD ::Vec3* release_right_vector();
  ::Vec3* mutable_right_vector();
  void set_allocated_right_vector(::Vec3* right_vector);
  private:
  const ::Vec3& _internal_right_vector() const;
  ::Vec3* _internal_mutable_right_vector();
  public:
  void unsafe_arena_set_allocated_right_vector(
      ::Vec3* right_vector);
  ::Vec3* unsafe_arena_release_right_vector();

  // .Vec3 velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Vec3& velocity() const;
  PROTOBUF_NODISCARD ::Vec3* release_velocity();
  ::Vec3* mutable_velocity();
  void set_allocated_velocity(::Vec3* velocity);
  private:
  const ::Vec3& _internal_velocity() const;
  ::Vec3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Vec3* velocity);
  ::Vec3* unsafe_arena_release_velocity();

  // float velocity_size = 5;
  void clear_velocity_size();
  float velocity_size() const;
  void set_velocity_size(float value);
  private:
  float _internal_velocity_size() const;
  void _internal_set_velocity_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:Movement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Vec3* progess_vector_;
    ::Vec3* forward_vector_;
    ::Vec3* right_vector_;
    ::Vec3* velocity_;
    float velocity_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_movement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Movement

// .Vec3 progess_vector = 1;
inline bool Movement::_internal_has_progess_vector() const {
  return this != internal_default_instance() && _impl_.progess_vector_ != nullptr;
}
inline bool Movement::has_progess_vector() const {
  return _internal_has_progess_vector();
}
inline const ::Vec3& Movement::_internal_progess_vector() const {
  const ::Vec3* p = _impl_.progess_vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vec3&>(
      ::_Vec3_default_instance_);
}
inline const ::Vec3& Movement::progess_vector() const {
  // @@protoc_insertion_point(field_get:Movement.progess_vector)
  return _internal_progess_vector();
}
inline void Movement::unsafe_arena_set_allocated_progess_vector(
    ::Vec3* progess_vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.progess_vector_);
  }
  _impl_.progess_vector_ = progess_vector;
  if (progess_vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Movement.progess_vector)
}
inline ::Vec3* Movement::release_progess_vector() {
  
  ::Vec3* temp = _impl_.progess_vector_;
  _impl_.progess_vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vec3* Movement::unsafe_arena_release_progess_vector() {
  // @@protoc_insertion_point(field_release:Movement.progess_vector)
  
  ::Vec3* temp = _impl_.progess_vector_;
  _impl_.progess_vector_ = nullptr;
  return temp;
}
inline ::Vec3* Movement::_internal_mutable_progess_vector() {
  
  if (_impl_.progess_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec3>(GetArenaForAllocation());
    _impl_.progess_vector_ = p;
  }
  return _impl_.progess_vector_;
}
inline ::Vec3* Movement::mutable_progess_vector() {
  ::Vec3* _msg = _internal_mutable_progess_vector();
  // @@protoc_insertion_point(field_mutable:Movement.progess_vector)
  return _msg;
}
inline void Movement::set_allocated_progess_vector(::Vec3* progess_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.progess_vector_);
  }
  if (progess_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progess_vector));
    if (message_arena != submessage_arena) {
      progess_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progess_vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.progess_vector_ = progess_vector;
  // @@protoc_insertion_point(field_set_allocated:Movement.progess_vector)
}

// .Vec3 forward_vector = 2;
inline bool Movement::_internal_has_forward_vector() const {
  return this != internal_default_instance() && _impl_.forward_vector_ != nullptr;
}
inline bool Movement::has_forward_vector() const {
  return _internal_has_forward_vector();
}
inline const ::Vec3& Movement::_internal_forward_vector() const {
  const ::Vec3* p = _impl_.forward_vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vec3&>(
      ::_Vec3_default_instance_);
}
inline const ::Vec3& Movement::forward_vector() const {
  // @@protoc_insertion_point(field_get:Movement.forward_vector)
  return _internal_forward_vector();
}
inline void Movement::unsafe_arena_set_allocated_forward_vector(
    ::Vec3* forward_vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forward_vector_);
  }
  _impl_.forward_vector_ = forward_vector;
  if (forward_vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Movement.forward_vector)
}
inline ::Vec3* Movement::release_forward_vector() {
  
  ::Vec3* temp = _impl_.forward_vector_;
  _impl_.forward_vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vec3* Movement::unsafe_arena_release_forward_vector() {
  // @@protoc_insertion_point(field_release:Movement.forward_vector)
  
  ::Vec3* temp = _impl_.forward_vector_;
  _impl_.forward_vector_ = nullptr;
  return temp;
}
inline ::Vec3* Movement::_internal_mutable_forward_vector() {
  
  if (_impl_.forward_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec3>(GetArenaForAllocation());
    _impl_.forward_vector_ = p;
  }
  return _impl_.forward_vector_;
}
inline ::Vec3* Movement::mutable_forward_vector() {
  ::Vec3* _msg = _internal_mutable_forward_vector();
  // @@protoc_insertion_point(field_mutable:Movement.forward_vector)
  return _msg;
}
inline void Movement::set_allocated_forward_vector(::Vec3* forward_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forward_vector_);
  }
  if (forward_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_vector));
    if (message_arena != submessage_arena) {
      forward_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.forward_vector_ = forward_vector;
  // @@protoc_insertion_point(field_set_allocated:Movement.forward_vector)
}

// .Vec3 right_vector = 3;
inline bool Movement::_internal_has_right_vector() const {
  return this != internal_default_instance() && _impl_.right_vector_ != nullptr;
}
inline bool Movement::has_right_vector() const {
  return _internal_has_right_vector();
}
inline const ::Vec3& Movement::_internal_right_vector() const {
  const ::Vec3* p = _impl_.right_vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vec3&>(
      ::_Vec3_default_instance_);
}
inline const ::Vec3& Movement::right_vector() const {
  // @@protoc_insertion_point(field_get:Movement.right_vector)
  return _internal_right_vector();
}
inline void Movement::unsafe_arena_set_allocated_right_vector(
    ::Vec3* right_vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_vector_);
  }
  _impl_.right_vector_ = right_vector;
  if (right_vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Movement.right_vector)
}
inline ::Vec3* Movement::release_right_vector() {
  
  ::Vec3* temp = _impl_.right_vector_;
  _impl_.right_vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vec3* Movement::unsafe_arena_release_right_vector() {
  // @@protoc_insertion_point(field_release:Movement.right_vector)
  
  ::Vec3* temp = _impl_.right_vector_;
  _impl_.right_vector_ = nullptr;
  return temp;
}
inline ::Vec3* Movement::_internal_mutable_right_vector() {
  
  if (_impl_.right_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec3>(GetArenaForAllocation());
    _impl_.right_vector_ = p;
  }
  return _impl_.right_vector_;
}
inline ::Vec3* Movement::mutable_right_vector() {
  ::Vec3* _msg = _internal_mutable_right_vector();
  // @@protoc_insertion_point(field_mutable:Movement.right_vector)
  return _msg;
}
inline void Movement::set_allocated_right_vector(::Vec3* right_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_vector_);
  }
  if (right_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_vector));
    if (message_arena != submessage_arena) {
      right_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.right_vector_ = right_vector;
  // @@protoc_insertion_point(field_set_allocated:Movement.right_vector)
}

// .Vec3 velocity = 4;
inline bool Movement::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool Movement::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::Vec3& Movement::_internal_velocity() const {
  const ::Vec3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vec3&>(
      ::_Vec3_default_instance_);
}
inline const ::Vec3& Movement::velocity() const {
  // @@protoc_insertion_point(field_get:Movement.velocity)
  return _internal_velocity();
}
inline void Movement::unsafe_arena_set_allocated_velocity(
    ::Vec3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Movement.velocity)
}
inline ::Vec3* Movement::release_velocity() {
  
  ::Vec3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vec3* Movement::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Movement.velocity)
  
  ::Vec3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::Vec3* Movement::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::Vec3* Movement::mutable_velocity() {
  ::Vec3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Movement.velocity)
  return _msg;
}
inline void Movement::set_allocated_velocity(::Vec3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Movement.velocity)
}

// float velocity_size = 5;
inline void Movement::clear_velocity_size() {
  _impl_.velocity_size_ = 0;
}
inline float Movement::_internal_velocity_size() const {
  return _impl_.velocity_size_;
}
inline float Movement::velocity_size() const {
  // @@protoc_insertion_point(field_get:Movement.velocity_size)
  return _internal_velocity_size();
}
inline void Movement::_internal_set_velocity_size(float value) {
  
  _impl_.velocity_size_ = value;
}
inline void Movement::set_velocity_size(float value) {
  _internal_set_velocity_size(value);
  // @@protoc_insertion_point(field_set:Movement.velocity_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_movement_2eproto
