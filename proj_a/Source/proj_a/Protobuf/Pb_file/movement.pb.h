// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: movement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_movement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_movement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "state.pb.h"
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_movement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_movement_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_movement_2eproto;
class Movement;
struct MovementDefaultTypeInternal;
extern MovementDefaultTypeInternal _Movement_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Movement* Arena::CreateMaybeMessage<::Movement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Movement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Movement) */ {
 public:
  inline Movement() : Movement(nullptr) {}
  ~Movement() override;
  explicit PROTOBUF_CONSTEXPR Movement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Movement(const Movement& from);
  Movement(Movement&& from) noexcept
    : Movement() {
    *this = ::std::move(from);
  }

  inline Movement& operator=(const Movement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Movement& operator=(Movement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Movement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Movement* internal_default_instance() {
    return reinterpret_cast<const Movement*>(
               &_Movement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Movement& a, Movement& b) {
    a.Swap(&b);
  }
  inline void Swap(Movement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Movement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Movement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Movement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Movement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Movement& from) {
    Movement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Movement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Movement";
  }
  protected:
  explicit Movement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTimestampFieldNumber = 5,
    kOrientationFieldNumber = 2,
    kProgessVectorFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string timestamp = 5;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // .Vec3 orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::Vec3& orientation() const;
  PROTOBUF_NODISCARD ::Vec3* release_orientation();
  ::Vec3* mutable_orientation();
  void set_allocated_orientation(::Vec3* orientation);
  private:
  const ::Vec3& _internal_orientation() const;
  ::Vec3* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::Vec3* orientation);
  ::Vec3* unsafe_arena_release_orientation();

  // .Vec3 progess_vector = 3;
  bool has_progess_vector() const;
  private:
  bool _internal_has_progess_vector() const;
  public:
  void clear_progess_vector();
  const ::Vec3& progess_vector() const;
  PROTOBUF_NODISCARD ::Vec3* release_progess_vector();
  ::Vec3* mutable_progess_vector();
  void set_allocated_progess_vector(::Vec3* progess_vector);
  private:
  const ::Vec3& _internal_progess_vector() const;
  ::Vec3* _internal_mutable_progess_vector();
  public:
  void unsafe_arena_set_allocated_progess_vector(
      ::Vec3* progess_vector);
  ::Vec3* unsafe_arena_release_progess_vector();

  // .State state = 4;
  void clear_state();
  ::State state() const;
  void set_state(::State value);
  private:
  ::State _internal_state() const;
  void _internal_set_state(::State value);
  public:

  // @@protoc_insertion_point(class_scope:Movement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
    ::Vec3* orientation_;
    ::Vec3* progess_vector_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_movement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Movement

// string player_id = 1;
inline void Movement::clear_player_id() {
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& Movement::player_id() const {
  // @@protoc_insertion_point(field_get:Movement.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Movement::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Movement.player_id)
}
inline std::string* Movement::mutable_player_id() {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:Movement.player_id)
  return _s;
}
inline const std::string& Movement::_internal_player_id() const {
  return _impl_.player_id_.Get();
}
inline void Movement::_internal_set_player_id(const std::string& value) {
  
  _impl_.player_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Movement::_internal_mutable_player_id() {
  
  return _impl_.player_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Movement::release_player_id() {
  // @@protoc_insertion_point(field_release:Movement.player_id)
  return _impl_.player_id_.Release();
}
inline void Movement::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  _impl_.player_id_.SetAllocated(player_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_id_.IsDefault()) {
    _impl_.player_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Movement.player_id)
}

// .Vec3 orientation = 2;
inline bool Movement::_internal_has_orientation() const {
  return this != internal_default_instance() && _impl_.orientation_ != nullptr;
}
inline bool Movement::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::Vec3& Movement::_internal_orientation() const {
  const ::Vec3* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vec3&>(
      ::_Vec3_default_instance_);
}
inline const ::Vec3& Movement::orientation() const {
  // @@protoc_insertion_point(field_get:Movement.orientation)
  return _internal_orientation();
}
inline void Movement::unsafe_arena_set_allocated_orientation(
    ::Vec3* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Movement.orientation)
}
inline ::Vec3* Movement::release_orientation() {
  
  ::Vec3* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vec3* Movement::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:Movement.orientation)
  
  ::Vec3* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::Vec3* Movement::_internal_mutable_orientation() {
  
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec3>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::Vec3* Movement::mutable_orientation() {
  ::Vec3* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:Movement.orientation)
  return _msg;
}
inline void Movement::set_allocated_orientation(::Vec3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:Movement.orientation)
}

// .Vec3 progess_vector = 3;
inline bool Movement::_internal_has_progess_vector() const {
  return this != internal_default_instance() && _impl_.progess_vector_ != nullptr;
}
inline bool Movement::has_progess_vector() const {
  return _internal_has_progess_vector();
}
inline const ::Vec3& Movement::_internal_progess_vector() const {
  const ::Vec3* p = _impl_.progess_vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vec3&>(
      ::_Vec3_default_instance_);
}
inline const ::Vec3& Movement::progess_vector() const {
  // @@protoc_insertion_point(field_get:Movement.progess_vector)
  return _internal_progess_vector();
}
inline void Movement::unsafe_arena_set_allocated_progess_vector(
    ::Vec3* progess_vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.progess_vector_);
  }
  _impl_.progess_vector_ = progess_vector;
  if (progess_vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Movement.progess_vector)
}
inline ::Vec3* Movement::release_progess_vector() {
  
  ::Vec3* temp = _impl_.progess_vector_;
  _impl_.progess_vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vec3* Movement::unsafe_arena_release_progess_vector() {
  // @@protoc_insertion_point(field_release:Movement.progess_vector)
  
  ::Vec3* temp = _impl_.progess_vector_;
  _impl_.progess_vector_ = nullptr;
  return temp;
}
inline ::Vec3* Movement::_internal_mutable_progess_vector() {
  
  if (_impl_.progess_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec3>(GetArenaForAllocation());
    _impl_.progess_vector_ = p;
  }
  return _impl_.progess_vector_;
}
inline ::Vec3* Movement::mutable_progess_vector() {
  ::Vec3* _msg = _internal_mutable_progess_vector();
  // @@protoc_insertion_point(field_mutable:Movement.progess_vector)
  return _msg;
}
inline void Movement::set_allocated_progess_vector(::Vec3* progess_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.progess_vector_);
  }
  if (progess_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progess_vector));
    if (message_arena != submessage_arena) {
      progess_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progess_vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.progess_vector_ = progess_vector;
  // @@protoc_insertion_point(field_set_allocated:Movement.progess_vector)
}

// .State state = 4;
inline void Movement::clear_state() {
  _impl_.state_ = 0;
}
inline ::State Movement::_internal_state() const {
  return static_cast< ::State >(_impl_.state_);
}
inline ::State Movement::state() const {
  // @@protoc_insertion_point(field_get:Movement.state)
  return _internal_state();
}
inline void Movement::_internal_set_state(::State value) {
  
  _impl_.state_ = value;
}
inline void Movement::set_state(::State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Movement.state)
}

// string timestamp = 5;
inline void Movement::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& Movement::timestamp() const {
  // @@protoc_insertion_point(field_get:Movement.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Movement::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timestamp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Movement.timestamp)
}
inline std::string* Movement::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:Movement.timestamp)
  return _s;
}
inline const std::string& Movement::_internal_timestamp() const {
  return _impl_.timestamp_.Get();
}
inline void Movement::_internal_set_timestamp(const std::string& value) {
  
  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* Movement::_internal_mutable_timestamp() {
  
  return _impl_.timestamp_.Mutable(GetArenaForAllocation());
}
inline std::string* Movement::release_timestamp() {
  // @@protoc_insertion_point(field_release:Movement.timestamp)
  return _impl_.timestamp_.Release();
}
inline void Movement::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  _impl_.timestamp_.SetAllocated(timestamp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Movement.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_movement_2eproto
