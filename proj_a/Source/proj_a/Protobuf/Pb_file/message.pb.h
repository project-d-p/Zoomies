// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "movement.pb.h"
#include "actor_position.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum MessageTypeCase {
    kMovement = 1,
    kActorPosition = 2,
    MESSAGE_TYPE_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovementFieldNumber = 1,
    kActorPositionFieldNumber = 2,
  };
  // .Movement movement = 1;
  bool has_movement() const;
  private:
  bool _internal_has_movement() const;
  public:
  void clear_movement();
  const ::Movement& movement() const;
  PROTOBUF_NODISCARD ::Movement* release_movement();
  ::Movement* mutable_movement();
  void set_allocated_movement(::Movement* movement);
  private:
  const ::Movement& _internal_movement() const;
  ::Movement* _internal_mutable_movement();
  public:
  void unsafe_arena_set_allocated_movement(
      ::Movement* movement);
  ::Movement* unsafe_arena_release_movement();

  // .ActorPosition actor_position = 2;
  bool has_actor_position() const;
  private:
  bool _internal_has_actor_position() const;
  public:
  void clear_actor_position();
  const ::ActorPosition& actor_position() const;
  PROTOBUF_NODISCARD ::ActorPosition* release_actor_position();
  ::ActorPosition* mutable_actor_position();
  void set_allocated_actor_position(::ActorPosition* actor_position);
  private:
  const ::ActorPosition& _internal_actor_position() const;
  ::ActorPosition* _internal_mutable_actor_position();
  public:
  void unsafe_arena_set_allocated_actor_position(
      ::ActorPosition* actor_position);
  ::ActorPosition* unsafe_arena_release_actor_position();

  void clear_message_type();
  MessageTypeCase message_type_case() const;
  // @@protoc_insertion_point(class_scope:Message)
 private:
  class _Internal;
  void set_has_movement();
  void set_has_actor_position();

  inline bool has_message_type() const;
  inline void clear_has_message_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageTypeUnion {
      constexpr MessageTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Movement* movement_;
      ::ActorPosition* actor_position_;
    } message_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// .Movement movement = 1;
inline bool Message::_internal_has_movement() const {
  return message_type_case() == kMovement;
}
inline bool Message::has_movement() const {
  return _internal_has_movement();
}
inline void Message::set_has_movement() {
  _impl_._oneof_case_[0] = kMovement;
}
inline ::Movement* Message::release_movement() {
  // @@protoc_insertion_point(field_release:Message.movement)
  if (_internal_has_movement()) {
    clear_has_message_type();
    ::Movement* temp = _impl_.message_type_.movement_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_type_.movement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Movement& Message::_internal_movement() const {
  return _internal_has_movement()
      ? *_impl_.message_type_.movement_
      : reinterpret_cast< ::Movement&>(::_Movement_default_instance_);
}
inline const ::Movement& Message::movement() const {
  // @@protoc_insertion_point(field_get:Message.movement)
  return _internal_movement();
}
inline ::Movement* Message::unsafe_arena_release_movement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Message.movement)
  if (_internal_has_movement()) {
    clear_has_message_type();
    ::Movement* temp = _impl_.message_type_.movement_;
    _impl_.message_type_.movement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_movement(::Movement* movement) {
  clear_message_type();
  if (movement) {
    set_has_movement();
    _impl_.message_type_.movement_ = movement;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Message.movement)
}
inline ::Movement* Message::_internal_mutable_movement() {
  if (!_internal_has_movement()) {
    clear_message_type();
    set_has_movement();
    _impl_.message_type_.movement_ = CreateMaybeMessage< ::Movement >(GetArenaForAllocation());
  }
  return _impl_.message_type_.movement_;
}
inline ::Movement* Message::mutable_movement() {
  ::Movement* _msg = _internal_mutable_movement();
  // @@protoc_insertion_point(field_mutable:Message.movement)
  return _msg;
}

// .ActorPosition actor_position = 2;
inline bool Message::_internal_has_actor_position() const {
  return message_type_case() == kActorPosition;
}
inline bool Message::has_actor_position() const {
  return _internal_has_actor_position();
}
inline void Message::set_has_actor_position() {
  _impl_._oneof_case_[0] = kActorPosition;
}
inline ::ActorPosition* Message::release_actor_position() {
  // @@protoc_insertion_point(field_release:Message.actor_position)
  if (_internal_has_actor_position()) {
    clear_has_message_type();
    ::ActorPosition* temp = _impl_.message_type_.actor_position_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_type_.actor_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ActorPosition& Message::_internal_actor_position() const {
  return _internal_has_actor_position()
      ? *_impl_.message_type_.actor_position_
      : reinterpret_cast< ::ActorPosition&>(::_ActorPosition_default_instance_);
}
inline const ::ActorPosition& Message::actor_position() const {
  // @@protoc_insertion_point(field_get:Message.actor_position)
  return _internal_actor_position();
}
inline ::ActorPosition* Message::unsafe_arena_release_actor_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Message.actor_position)
  if (_internal_has_actor_position()) {
    clear_has_message_type();
    ::ActorPosition* temp = _impl_.message_type_.actor_position_;
    _impl_.message_type_.actor_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_actor_position(::ActorPosition* actor_position) {
  clear_message_type();
  if (actor_position) {
    set_has_actor_position();
    _impl_.message_type_.actor_position_ = actor_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Message.actor_position)
}
inline ::ActorPosition* Message::_internal_mutable_actor_position() {
  if (!_internal_has_actor_position()) {
    clear_message_type();
    set_has_actor_position();
    _impl_.message_type_.actor_position_ = CreateMaybeMessage< ::ActorPosition >(GetArenaForAllocation());
  }
  return _impl_.message_type_.actor_position_;
}
inline ::ActorPosition* Message::mutable_actor_position() {
  ::ActorPosition* _msg = _internal_mutable_actor_position();
  // @@protoc_insertion_point(field_mutable:Message.actor_position)
  return _msg;
}

inline bool Message::has_message_type() const {
  return message_type_case() != MESSAGE_TYPE_NOT_SET;
}
inline void Message::clear_has_message_type() {
  _impl_._oneof_case_[0] = MESSAGE_TYPE_NOT_SET;
}
inline Message::MessageTypeCase Message::message_type_case() const {
  return Message::MessageTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
